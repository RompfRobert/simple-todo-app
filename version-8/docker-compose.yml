services:
  proxy:
    image: caddy:2.7-alpine
    container_name: simple-todo-proxy
    ports:
      - "80:80"
      - "443:443"  # For future TLS support
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./static:/srv/static:ro  # Read-only mount for static files
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - front-net
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/proxy-health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: "8.0.0"
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: simple-todo:latest
    # No ports exposed - only accessible through the proxy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      TRACING_ENABLED: ${TRACING_ENABLED:-false}
      OTEL_SERVICE_NAME: todo-web
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4318
      OTEL_TRACES_EXPORTER: otlp
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    user: "10001:10001"
    volumes:
      - app_data:/app/data
    networks:
      - front-net  # For proxy communication
      - back-net   # For database communication
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:5000/healthz').status==200 else 1)"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3
    command: ["gunicorn", "--config", "gunicorn.conf.py", "app:app"]

  worker:
    image: simple-todo:latest
    command: celery -A celery_app.celery worker --concurrency=2 --loglevel=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    environment:
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DATABASE_URL: ${DATABASE_URL}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      TRACING_ENABLED: ${TRACING_ENABLED:-false}
      OTEL_SERVICE_NAME: todo-worker
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4318
      OTEL_TRACES_EXPORTER: otlp
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - back-net
    volumes:
      - .:/app
      - app_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import redis, os; redis.Redis.from_url(os.environ.get('CELERY_BROKER_URL')).ping()"]
      interval: 30s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: simple-todo-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - back-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    depends_on:
      - web

  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: simple-todo-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      # Keep OTLP collectors internal
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - back-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - back-net
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    # No ports exposed - only accessible from back-net
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - back-net  # Only accessible from backend network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5

volumes:
  postgres_data:
    driver: local
  app_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  prometheus_data:
    driver: local

networks:
  front-net:
    driver: bridge
    name: simple-todo-frontend
  back-net:
    driver: bridge
    name: simple-todo-backend
    internal: true  # Not exposed to host network