services:
  proxy:
    image: caddy:2.7-alpine
    container_name: simple-todo-proxy
    ports:
      - "80:80"
      - "443:443"  # For future TLS support
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./static:/srv/static:ro  # Read-only mount for static files
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - front-net
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/proxy-health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: "6.0.0"
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
    image: simple-todo:v6
    # No ports exposed - only accessible through the proxy
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
        web:
          build: .
          image: todo-app:latest
          command: gunicorn -b 0.0.0.0:8000 app:app --worker-class gevent --workers=2
          environment:
            APP_ENV: ${APP_ENV:-production}
            LOG_LEVEL: ${LOG_LEVEL:-INFO}
            DATABASE_URL: ${DATABASE_URL}
            CELERY_BROKER_URL: redis://redis:6379/0
            CELERY_RESULT_BACKEND: redis://redis:6379/1
          depends_on:
            db:
              condition: service_healthy
            redis:
              condition: service_healthy
          healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost/healthz"]
            interval: 30s
            timeout: 5s
            retries: 3
          networks:
            - back-net
          volumes:
            - .:/app

        worker:
          image: todo-app:latest
          command: celery -A celery_app.celery worker --concurrency=2 --loglevel=${LOG_LEVEL:-INFO}
          environment:
            APP_ENV: ${APP_ENV:-production}
            LOG_LEVEL: ${LOG_LEVEL:-INFO}
            DATABASE_URL: ${DATABASE_URL}
            CELERY_BROKER_URL: redis://redis:6379/0
            CELERY_RESULT_BACKEND: redis://redis:6379/1
          depends_on:
            db:
              condition: service_healthy
            redis:
              condition: service_healthy
          healthcheck:
            test: ["CMD", "python", "-c", "import redis; import os; redis.Redis.from_url(os.environ['CELERY_BROKER_URL']).ping()"]
            interval: 30s
            timeout: 5s
            retries: 3
          networks:
            - back-net
          volumes:
            - .:/app

        redis:
          image: redis:7-alpine
          healthcheck:
            test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
            interval: 30s
            timeout: 5s
            retries: 3
          networks:
            - back-net

        db:
          image: postgres:16-alpine
          # No ports exposed - only accessible from back-net
          env_file:
            - .env
          environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          volumes:
            - postgres_data:/var/lib/postgresql/data
          networks:
            - back-net  # Only accessible from backend network
          restart: unless-stopped
          healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            start_period: 30s
            retries: 5

      db:
        condition: service_healthy
    restart: unless-stopped
    user: "10001:10001"
    volumes:
      - app_data:/app/data
    networks:
      - front-net  # For proxy communication
      - back-net   # For database communication
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:5000/healthz').status==200 else 1)"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  db:
    image: postgres:16-alpine
    # No ports exposed - only accessible from back-net
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - back-net  # Only accessible from backend network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5

volumes:
  postgres_data:
    driver: local
  app_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  front-net:
    driver: bridge
    name: simple-todo-frontend
  back-net:
    driver: bridge
    name: simple-todo-backend
    internal: true  # Not exposed to host network